import pandas as pd
import numpy as np
eps = np.finfo(float).eps
from numpy import log2 as log

def find_entropy(df):
    Class = df.keys()[-1]
    entropy = 0
    values = df[Class].unique()

    for value in values:
        fraction = len(df[Class][df[Class] == value]) / len(df[Class])
        entropy += -fraction * np.log2(fraction + eps)

    return entropy

def find_entropy_attribute(df, attribute):
    Class = df.keys()[-1]
    target_variables = df[Class].unique()
    variables = df[attribute].unique()
    entropy2 = 0

    for variable in variables:
        entropy = 0
        for target_variable in target_variables:
            num = len(df[attribute][df[attribute] == variable][df[Class] == target_variable])
            den = len(df[attribute][df[attribute] == variable]) + eps
            fraction = num / den
            entropy += -fraction * np.log2(fraction + eps)

        fraction2 = len(df[attribute][df[attribute] == variable]) / len(df)
        entropy2 += -fraction2 * entropy

    return abs(entropy2)

def find_winner(df):
    Entropy_att = []
    IG = []
    for key in df.keys()[:-1]:
        Entropy_att.append(find_entropy_attribute(df, key))
        IG.append(find_entropy(df) - find_entropy_attribute(df, key))

    print("Entropy_att:", Entropy_att)
    print("IG:", IG)

    if not IG:
        raise ValueError("IG list is empty. There might be an issue with the calculations.")

    return df.keys()[:-1][np.argmax(IG)]

def get_subtable(df, node, value):
    return df[df[node] == value].reset_index(drop=True)

def buildTree(df, tree=None):
    Class = df.keys()[-1]

    target_values = df[Class].unique()

    if len(target_values) == 1:
        return {"class": target_values[0]}

    if len(df.columns) == 1:
        return {"class": df[Class].mode()[0]}

    best_attribute = find_winner(df)

    if tree is None:
        tree = {}

    tree[best_attribute] = {}

    attribute_values = df[best_attribute].unique()

    for value in attribute_values:
        subtable = get_subtable(df, best_attribute, value)
        tree[best_attribute][value] = buildTree(subtable)

    return tree

# Load the dataset
df = pd.read_csv('/content/drive/MyDrive/tennis_csv_id3.csv')
print("\n Given Play Tennis Data Set:\n\n", df)

# Build the decision tree
tree = buildTree(df)

# Print the decision tree
import pprint
pprint.pprint(tree)

# Test the decision tree
test = {'Outlook': 'Sunny', 'Temperature': 'Hot', 'Humidity': 'High', 'Wind': 'Weak'}
result = func(test, tree)
print(result)
